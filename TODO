Stuff that doesn't work:

[ projects

- Either persp-mode should work (it had funky issues with window restoration) or independent emacs instances should be fully usable and snappy.

	If independent Emacs was really snappy (particularly in the shell), I could finally stop using the hacky server setup. Notably, it's missing:

	- saving caches shouldn't overwrite the old ones
	- some way to limit buffers the way persp-mode does it
	- syncing between emacs instances should be easy - maybe the generic clipboard is good enough?
	- startup needs to be <2s, on cli <0.5s
	- some way to identify running instances, like names or something
]

[ parentheses

- smartparens is annoying because it's so over-bearing; it should be replaced with something simpler

	I mostly just need the sexp-functions (which newer ruby-mode might make unnecessary) and the sane "(re)wrap selection with things" feature. Might just fork it and remove the annoying auto-pairing entirely.

- "close all open parentheses" button that understands def-end pairs

	unfinished snippet:
  (defun close-quoted-open-paren ()
   (interactive)
   (let (pos closing)
     (with-syntax-table all-paren-syntax-table2
       (setq pos (save-excursion (up-list -1) (point)))
       (setq closing (matching-paren (char-after pos))))
     (and (eq (char-syntax (char-before pos)) ?\\)
          (not (eq (char-syntax (char-before (1- pos))) ?\\))
          (insert (char-before pos)))
     (insert closing)))

  (defun close-open-parens ()
    (interactive)
    (sp-up-sexp))
    ;; (insert (save-excursion (up-list -1) (matching-paren (char-after)))))

  (global-set-key (kbd "C-c )") 'close-open-parens)

  (setq sp-navigate-close-if-unbalanced t)

]

[ file navigation

- eventually, Emacs should replace mc:
	- actions based on file extensions
	- quick start (maybe make the init.el more modular, so terminal instances don't load look.el etc.)
	- panes
	- trash
	- quick jump to terminal
	- make zsh suspend painless, or run some eshell thingy, or something

- syncing of bookmarks between zsh dirs and Emacs

	snippet:

  (require 'bookmark)
  (setq enable-recursive-minibuffers t)
  (define-key ido-file-dir-completion-map [(meta control ?b)] 'ido-goto-bookmark)
  (defun ido-goto-bookmark (bookmark)
    (interactive
     (list (bookmark-completing-read "Jump to bookmark"
      				   bookmark-current-bookmark)))
    (unless bookmark
      (error "No bookmark specified"))
    (let ((filename (bookmark-get-filename bookmark)))
      (if (file-directory-p filename)
  	(progn
  	  (ido-set-current-directory filename)
  	  (setq ido-text ""))
        (progn
  	(ido-set-current-directory (file-name-directory filename))))
      (setq ido-exit        'refresh
  	  ido-text-init   ido-text
  	  ido-rotate-temp t)
      (exit-minibuffer)))
]

[ bugs / misc

- Jumpy cursor, particularly in notes/markdown-mode. Unlikely about the mouse. auto-complete seems to make it worse, but doesn't cause it.

	Stating the suspicion that it has something to do with "last line on the screen" or "being in a list", or both.

- align.el uses tabs to indent when tabstops are enabled?! teh fuck align.el?! I hate you so much.

- is custom org mode still necessary?

- minimap is unusable at the moment, mostly because it's either slow (minimap.el version) or super flickery (sublimity version)

- breadcrumbs at completely unusable and the code is a mess, but automatic "get me back to where I was a moment ago" is badly needed

- fonts aren't set properly when using the server; probably just a messed up hook or font path thing

- before-save-hooks should have a way to turn them off; probably a minor mode

- delete-trailing-whitespace is super-slow and needs to be replaced

- instead of normalize-unicode, we should probably turn (some? all?) diacritics into an input method, both for speed and whitespread compatibility

]

[ project-specific code / keybindings

- .dir-locals.el is super-cool and also super-retarded because it warns aobut EVERYTHING. safe-local stuff needs to go by path or something instead. it's probably easier to replace it with a custom minor-mode etc. that is less retarded. unfortunately, none of the existing project modes seem to conceive of wanting to run custom lisp code bundled with a project.

	so I'm just gonna fork the dir-local code and advise find-file.

	what this needs to do:

	- go up and find .custom-code.el file (or stop at some reasonable point, say a .git boundary). either the files.el code works for that, or whatever projectile uses, unless it's too messy to port.

	- eval the file and apply to buffer (after loading it), probably by hooking into find-file-hook (without asking stupid questions).

	- provide convenient shortcuts available in the file:

		- define custom macro (probably on (C-)f5 to (C-)f8)
		- defun custom functions only available *in this buffer*, probably with something like this: <https://stackoverflow.com/questions/8008211>

]

[ regexes

visual-regexes is cool, but is Python-based. That's mostly fine, but I either:

- should switch completely to Emacs regexes, which have some cool stuff (but muh Ruby!!w!)
- finish the Ruby port

]

[ mode-line

it needs to be cleaned up at some point. notably:

	- move nyan-cat *after* the number, maybe even to the very end, so that tiny buffers are more useful.
		(:eval (list (nyan-create)))
	- clean up what part of the encoding thingies we want
	- remove useless parentheses
	- shorter major-mode names

]
